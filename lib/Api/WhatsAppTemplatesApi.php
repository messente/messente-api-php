<?php
/**
 * WhatsAppTemplatesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Messente\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber and WhatsApp messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Messente\Api\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Messente\Api\ApiException;
use Messente\Api\Configuration;
use Messente\Api\HeaderSelector;
use Messente\Api\ObjectSerializer;

/**
 * WhatsAppTemplatesApi Class Doc Comment
 *
 * @category Class
 * @package  Messente\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class WhatsAppTemplatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createWhatsappTemplate' => [
            'application/json',
        ],
        'deleteWhatsappTemplate' => [
            'application/json',
        ],
        'getWhatsappTemplateById' => [
            'application/json',
        ],
        'listWhatsappTemplates' => [
            'application/json',
        ],
        'updateWhatsappTemplate' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createWhatsappTemplate
     *
     * Creates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  \Messente\Api\Model\WhatsappCreateTemplateRequest $whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Messente\Api\Model\WhatsappCreateTemplateResponse|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel
     */
    public function createWhatsappTemplate($wabaId, $whatsappCreateTemplateRequest, string $contentType = self::contentTypes['createWhatsappTemplate'][0])
    {
        list($response) = $this->createWhatsappTemplateWithHttpInfo($wabaId, $whatsappCreateTemplateRequest, $contentType);
        return $response;
    }

    /**
     * Operation createWhatsappTemplateWithHttpInfo
     *
     * Creates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  \Messente\Api\Model\WhatsappCreateTemplateRequest $whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Messente\Api\Model\WhatsappCreateTemplateResponse|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWhatsappTemplateWithHttpInfo($wabaId, $whatsappCreateTemplateRequest, string $contentType = self::contentTypes['createWhatsappTemplate'][0])
    {
        $request = $this->createWhatsappTemplateRequest($wabaId, $whatsappCreateTemplateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Messente\Api\Model\WhatsappCreateTemplateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\WhatsappCreateTemplateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\WhatsappCreateTemplateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Messente\Api\Model\WhatsappCreateTemplateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\WhatsappCreateTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWhatsappTemplateAsync
     *
     * Creates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  \Messente\Api\Model\WhatsappCreateTemplateRequest $whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWhatsappTemplateAsync($wabaId, $whatsappCreateTemplateRequest, string $contentType = self::contentTypes['createWhatsappTemplate'][0])
    {
        return $this->createWhatsappTemplateAsyncWithHttpInfo($wabaId, $whatsappCreateTemplateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWhatsappTemplateAsyncWithHttpInfo
     *
     * Creates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  \Messente\Api\Model\WhatsappCreateTemplateRequest $whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWhatsappTemplateAsyncWithHttpInfo($wabaId, $whatsappCreateTemplateRequest, string $contentType = self::contentTypes['createWhatsappTemplate'][0])
    {
        $returnType = '\Messente\Api\Model\WhatsappCreateTemplateResponse';
        $request = $this->createWhatsappTemplateRequest($wabaId, $whatsappCreateTemplateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWhatsappTemplate'
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  \Messente\Api\Model\WhatsappCreateTemplateRequest $whatsappCreateTemplateRequest The WhatsApp template to create (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createWhatsappTemplateRequest($wabaId, $whatsappCreateTemplateRequest, string $contentType = self::contentTypes['createWhatsappTemplate'][0])
    {

        // verify the required parameter 'wabaId' is set
        if ($wabaId === null || (is_array($wabaId) && count($wabaId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wabaId when calling createWhatsappTemplate'
            );
        }

        // verify the required parameter 'whatsappCreateTemplateRequest' is set
        if ($whatsappCreateTemplateRequest === null || (is_array($whatsappCreateTemplateRequest) && count($whatsappCreateTemplateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whatsappCreateTemplateRequest when calling createWhatsappTemplate'
            );
        }


        $resourcePath = '/whatsapp/wabas/{wabaId}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wabaId !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($wabaId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($whatsappCreateTemplateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($whatsappCreateTemplateRequest));
            } else {
                $httpBody = $whatsappCreateTemplateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWhatsappTemplate
     *
     * Deletes a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $name The name of the template to delete (required)
     * @param  string|null $hsmId The ID of the template to delete (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel
     */
    public function deleteWhatsappTemplate($wabaId, $name, $hsmId = null, string $contentType = self::contentTypes['deleteWhatsappTemplate'][0])
    {
        list($response) = $this->deleteWhatsappTemplateWithHttpInfo($wabaId, $name, $hsmId, $contentType);
        return $response;
    }

    /**
     * Operation deleteWhatsappTemplateWithHttpInfo
     *
     * Deletes a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $name The name of the template to delete (required)
     * @param  string|null $hsmId The ID of the template to delete (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWhatsappTemplateWithHttpInfo($wabaId, $name, $hsmId = null, string $contentType = self::contentTypes['deleteWhatsappTemplate'][0])
    {
        $request = $this->deleteWhatsappTemplateRequest($wabaId, $name, $hsmId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWhatsappTemplateAsync
     *
     * Deletes a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $name The name of the template to delete (required)
     * @param  string|null $hsmId The ID of the template to delete (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWhatsappTemplateAsync($wabaId, $name, $hsmId = null, string $contentType = self::contentTypes['deleteWhatsappTemplate'][0])
    {
        return $this->deleteWhatsappTemplateAsyncWithHttpInfo($wabaId, $name, $hsmId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWhatsappTemplateAsyncWithHttpInfo
     *
     * Deletes a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $name The name of the template to delete (required)
     * @param  string|null $hsmId The ID of the template to delete (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWhatsappTemplateAsyncWithHttpInfo($wabaId, $name, $hsmId = null, string $contentType = self::contentTypes['deleteWhatsappTemplate'][0])
    {
        $returnType = 'object';
        $request = $this->deleteWhatsappTemplateRequest($wabaId, $name, $hsmId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWhatsappTemplate'
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $name The name of the template to delete (required)
     * @param  string|null $hsmId The ID of the template to delete (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteWhatsappTemplateRequest($wabaId, $name, $hsmId = null, string $contentType = self::contentTypes['deleteWhatsappTemplate'][0])
    {

        // verify the required parameter 'wabaId' is set
        if ($wabaId === null || (is_array($wabaId) && count($wabaId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wabaId when calling deleteWhatsappTemplate'
            );
        }

        // verify the required parameter 'name' is set
        if ($name === null || (is_array($name) && count($name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $name when calling deleteWhatsappTemplate'
            );
        }



        $resourcePath = '/whatsapp/wabas/{wabaId}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $hsmId,
            'hsmId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($wabaId !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($wabaId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWhatsappTemplateById
     *
     * Requests a WhatsApp template with the given ID
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWhatsappTemplateById'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Messente\Api\Model\WhatsappTemplateResponse|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel
     */
    public function getWhatsappTemplateById($wabaId, $templateId, string $contentType = self::contentTypes['getWhatsappTemplateById'][0])
    {
        list($response) = $this->getWhatsappTemplateByIdWithHttpInfo($wabaId, $templateId, $contentType);
        return $response;
    }

    /**
     * Operation getWhatsappTemplateByIdWithHttpInfo
     *
     * Requests a WhatsApp template with the given ID
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWhatsappTemplateById'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Messente\Api\Model\WhatsappTemplateResponse|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWhatsappTemplateByIdWithHttpInfo($wabaId, $templateId, string $contentType = self::contentTypes['getWhatsappTemplateById'][0])
    {
        $request = $this->getWhatsappTemplateByIdRequest($wabaId, $templateId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Messente\Api\Model\WhatsappTemplateResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\WhatsappTemplateResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\WhatsappTemplateResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Messente\Api\Model\WhatsappTemplateResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\WhatsappTemplateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWhatsappTemplateByIdAsync
     *
     * Requests a WhatsApp template with the given ID
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWhatsappTemplateById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWhatsappTemplateByIdAsync($wabaId, $templateId, string $contentType = self::contentTypes['getWhatsappTemplateById'][0])
    {
        return $this->getWhatsappTemplateByIdAsyncWithHttpInfo($wabaId, $templateId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWhatsappTemplateByIdAsyncWithHttpInfo
     *
     * Requests a WhatsApp template with the given ID
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWhatsappTemplateById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWhatsappTemplateByIdAsyncWithHttpInfo($wabaId, $templateId, string $contentType = self::contentTypes['getWhatsappTemplateById'][0])
    {
        $returnType = '\Messente\Api\Model\WhatsappTemplateResponse';
        $request = $this->getWhatsappTemplateByIdRequest($wabaId, $templateId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWhatsappTemplateById'
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to retrieve (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getWhatsappTemplateById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getWhatsappTemplateByIdRequest($wabaId, $templateId, string $contentType = self::contentTypes['getWhatsappTemplateById'][0])
    {

        // verify the required parameter 'wabaId' is set
        if ($wabaId === null || (is_array($wabaId) && count($wabaId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wabaId when calling getWhatsappTemplateById'
            );
        }

        // verify the required parameter 'templateId' is set
        if ($templateId === null || (is_array($templateId) && count($templateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateId when calling getWhatsappTemplateById'
            );
        }


        $resourcePath = '/whatsapp/wabas/{wabaId}/templates/{templateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wabaId !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($wabaId),
                $resourcePath
            );
        }
        // path params
        if ($templateId !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($templateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listWhatsappTemplates
     *
     * Requests a list of WhatsApp templates
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  int|null $limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param  string|null $before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param  string|null $after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateCategory|null $category A filter for returning only templates matching a specific category. (optional)
     * @param  string|null $content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param  string|null $language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) (optional)
     * @param  string|null $name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateStatus|null $status A filter for returning only templates matching a specific status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWhatsappTemplates'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Messente\Api\Model\WhatsappListTemplatesResponse|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel
     */
    public function listWhatsappTemplates($wabaId, $limit = 25, $before = null, $after = null, $category = null, $content = null, $language = null, $name = null, $status = null, string $contentType = self::contentTypes['listWhatsappTemplates'][0])
    {
        list($response) = $this->listWhatsappTemplatesWithHttpInfo($wabaId, $limit, $before, $after, $category, $content, $language, $name, $status, $contentType);
        return $response;
    }

    /**
     * Operation listWhatsappTemplatesWithHttpInfo
     *
     * Requests a list of WhatsApp templates
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  int|null $limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param  string|null $before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param  string|null $after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateCategory|null $category A filter for returning only templates matching a specific category. (optional)
     * @param  string|null $content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param  string|null $language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) (optional)
     * @param  string|null $name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateStatus|null $status A filter for returning only templates matching a specific status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWhatsappTemplates'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Messente\Api\Model\WhatsappListTemplatesResponse|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWhatsappTemplatesWithHttpInfo($wabaId, $limit = 25, $before = null, $after = null, $category = null, $content = null, $language = null, $name = null, $status = null, string $contentType = self::contentTypes['listWhatsappTemplates'][0])
    {
        $request = $this->listWhatsappTemplatesRequest($wabaId, $limit, $before, $after, $category, $content, $language, $name, $status, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Messente\Api\Model\WhatsappListTemplatesResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\WhatsappListTemplatesResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\WhatsappListTemplatesResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Messente\Api\Model\WhatsappListTemplatesResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\WhatsappListTemplatesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listWhatsappTemplatesAsync
     *
     * Requests a list of WhatsApp templates
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  int|null $limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param  string|null $before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param  string|null $after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateCategory|null $category A filter for returning only templates matching a specific category. (optional)
     * @param  string|null $content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param  string|null $language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) (optional)
     * @param  string|null $name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateStatus|null $status A filter for returning only templates matching a specific status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWhatsappTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWhatsappTemplatesAsync($wabaId, $limit = 25, $before = null, $after = null, $category = null, $content = null, $language = null, $name = null, $status = null, string $contentType = self::contentTypes['listWhatsappTemplates'][0])
    {
        return $this->listWhatsappTemplatesAsyncWithHttpInfo($wabaId, $limit, $before, $after, $category, $content, $language, $name, $status, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listWhatsappTemplatesAsyncWithHttpInfo
     *
     * Requests a list of WhatsApp templates
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  int|null $limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param  string|null $before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param  string|null $after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateCategory|null $category A filter for returning only templates matching a specific category. (optional)
     * @param  string|null $content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param  string|null $language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) (optional)
     * @param  string|null $name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateStatus|null $status A filter for returning only templates matching a specific status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWhatsappTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWhatsappTemplatesAsyncWithHttpInfo($wabaId, $limit = 25, $before = null, $after = null, $category = null, $content = null, $language = null, $name = null, $status = null, string $contentType = self::contentTypes['listWhatsappTemplates'][0])
    {
        $returnType = '\Messente\Api\Model\WhatsappListTemplatesResponse';
        $request = $this->listWhatsappTemplatesRequest($wabaId, $limit, $before, $after, $category, $content, $language, $name, $status, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listWhatsappTemplates'
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  int|null $limit The number of templates to return in the list. Although the max size is 500, for large datasets it is recommended to use a lower limit and instead use pagination to avoid potential timeouts. Defaults to 25. (optional, default to 25)
     * @param  string|null $before A cursor point used for a paginated request to indicate the template to paginate backwards from. (optional)
     * @param  string|null $after A cursor point used for a paginated request to indicate the template to paginate forwards from. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateCategory|null $category A filter for returning only templates matching a specific category. (optional)
     * @param  string|null $content A search filter representing the content of a template. Only matching templates will be returned in the list. (optional)
     * @param  string|null $language A filter  for returning only templates matching a specific language code. A list of supported languages is available in the [WhatsApp documentation](https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/) (optional)
     * @param  string|null $name A search filter representing the name, either full or partial, of a template. Only matching templates will be returned in the list. (optional)
     * @param  \Messente\Api\Model\WhatsappTemplateStatus|null $status A filter for returning only templates matching a specific status. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listWhatsappTemplates'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listWhatsappTemplatesRequest($wabaId, $limit = 25, $before = null, $after = null, $category = null, $content = null, $language = null, $name = null, $status = null, string $contentType = self::contentTypes['listWhatsappTemplates'][0])
    {

        // verify the required parameter 'wabaId' is set
        if ($wabaId === null || (is_array($wabaId) && count($wabaId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wabaId when calling listWhatsappTemplates'
            );
        }

        if ($limit !== null && $limit > 500) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WhatsAppTemplatesApi.listWhatsappTemplates, must be smaller than or equal to 500.');
        }
        if ($limit !== null && $limit < 1) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling WhatsAppTemplatesApi.listWhatsappTemplates, must be bigger than or equal to 1.');
        }
        








        $resourcePath = '/whatsapp/wabas/{wabaId}/templates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $before,
            'before', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $after,
            'after', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $category,
            'category', // param base name
            'WhatsappTemplateCategory', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $content,
            'content', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $language,
            'language', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $name,
            'name', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'WhatsappTemplateStatus', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($wabaId !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($wabaId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWhatsappTemplate
     *
     * Updates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to update (required)
     * @param  \Messente\Api\Model\WhatsappUpdateTemplateRequest $whatsappUpdateTemplateRequest The template data to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel
     */
    public function updateWhatsappTemplate($wabaId, $templateId, $whatsappUpdateTemplateRequest, string $contentType = self::contentTypes['updateWhatsappTemplate'][0])
    {
        list($response) = $this->updateWhatsappTemplateWithHttpInfo($wabaId, $templateId, $whatsappUpdateTemplateRequest, $contentType);
        return $response;
    }

    /**
     * Operation updateWhatsappTemplateWithHttpInfo
     *
     * Updates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to update (required)
     * @param  \Messente\Api\Model\WhatsappUpdateTemplateRequest $whatsappUpdateTemplateRequest The template data to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \Messente\Api\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel|\Messente\Api\Model\ErrorOmnichannel, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWhatsappTemplateWithHttpInfo($wabaId, $templateId, $whatsappUpdateTemplateRequest, string $contentType = self::contentTypes['updateWhatsappTemplate'][0])
    {
        $request = $this->updateWhatsappTemplateRequest($wabaId, $templateId, $whatsappUpdateTemplateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\Messente\Api\Model\ErrorOmnichannel' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Messente\Api\Model\ErrorOmnichannel' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Messente\Api\Model\ErrorOmnichannel', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Messente\Api\Model\ErrorOmnichannel',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWhatsappTemplateAsync
     *
     * Updates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to update (required)
     * @param  \Messente\Api\Model\WhatsappUpdateTemplateRequest $whatsappUpdateTemplateRequest The template data to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWhatsappTemplateAsync($wabaId, $templateId, $whatsappUpdateTemplateRequest, string $contentType = self::contentTypes['updateWhatsappTemplate'][0])
    {
        return $this->updateWhatsappTemplateAsyncWithHttpInfo($wabaId, $templateId, $whatsappUpdateTemplateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWhatsappTemplateAsyncWithHttpInfo
     *
     * Updates a WhatsApp template
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to update (required)
     * @param  \Messente\Api\Model\WhatsappUpdateTemplateRequest $whatsappUpdateTemplateRequest The template data to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWhatsappTemplateAsyncWithHttpInfo($wabaId, $templateId, $whatsappUpdateTemplateRequest, string $contentType = self::contentTypes['updateWhatsappTemplate'][0])
    {
        $returnType = 'object';
        $request = $this->updateWhatsappTemplateRequest($wabaId, $templateId, $whatsappUpdateTemplateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWhatsappTemplate'
     *
     * @param  string $wabaId The ID of the WABA (required)
     * @param  string $templateId The ID of the template to update (required)
     * @param  \Messente\Api\Model\WhatsappUpdateTemplateRequest $whatsappUpdateTemplateRequest The template data to be updated (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateWhatsappTemplate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateWhatsappTemplateRequest($wabaId, $templateId, $whatsappUpdateTemplateRequest, string $contentType = self::contentTypes['updateWhatsappTemplate'][0])
    {

        // verify the required parameter 'wabaId' is set
        if ($wabaId === null || (is_array($wabaId) && count($wabaId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wabaId when calling updateWhatsappTemplate'
            );
        }

        // verify the required parameter 'templateId' is set
        if ($templateId === null || (is_array($templateId) && count($templateId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $templateId when calling updateWhatsappTemplate'
            );
        }

        // verify the required parameter 'whatsappUpdateTemplateRequest' is set
        if ($whatsappUpdateTemplateRequest === null || (is_array($whatsappUpdateTemplateRequest) && count($whatsappUpdateTemplateRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $whatsappUpdateTemplateRequest when calling updateWhatsappTemplate'
            );
        }


        $resourcePath = '/whatsapp/wabas/{wabaId}/templates/{templateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($wabaId !== null) {
            $resourcePath = str_replace(
                '{' . 'wabaId' . '}',
                ObjectSerializer::toPathValue($wabaId),
                $resourcePath
            );
        }
        // path params
        if ($templateId !== null) {
            $resourcePath = str_replace(
                '{' . 'templateId' . '}',
                ObjectSerializer::toPathValue($templateId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($whatsappUpdateTemplateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($whatsappUpdateTemplateRequest));
            } else {
                $httpBody = $whatsappUpdateTemplateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
