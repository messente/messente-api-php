<?php
/**
 * OmnimessageMessagesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Messente\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Messente API
 *
 * [Messente](https://messente.com) is a global provider of messaging and user verification services.  * Send and receive SMS, Viber, WhatsApp and Telegram messages. * Manage contacts and groups. * Fetch detailed info about phone numbers. * Blacklist phone numbers to make sure you're not sending any unwanted messages.  Messente builds [tools](https://messente.com/documentation) to help organizations connect their services to people anywhere in the world.
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: messente@messente.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Messente\Api\Model;

use \ArrayAccess;
use \Messente\Api\ObjectSerializer;

/**
 * OmnimessageMessagesInner Class Doc Comment
 *
 * @category Class
 * @package  Messente\Api
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OmnimessageMessagesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Omnimessage_messages_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'sender' => 'string',
        'validity' => 'int',
        'ttl' => 'int',
        'text' => 'string',
        'imageUrl' => 'string',
        'buttonUrl' => 'string',
        'buttonText' => 'string',
        'channel' => 'string',
        'video' => '\Messente\Api\Model\ViberVideo',
        'autoconvert' => 'string',
        'udh' => 'string',
        'template' => '\Messente\Api\Model\WhatsAppTemplate',
        'documentUrl' => 'string',
        'audioUrl' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'sender' => null,
        'validity' => null,
        'ttl' => null,
        'text' => null,
        'imageUrl' => null,
        'buttonUrl' => null,
        'buttonText' => null,
        'channel' => null,
        'video' => null,
        'autoconvert' => null,
        'udh' => null,
        'template' => null,
        'documentUrl' => null,
        'audioUrl' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'sender' => false,
        'validity' => false,
        'ttl' => false,
        'text' => false,
        'imageUrl' => false,
        'buttonUrl' => false,
        'buttonText' => false,
        'channel' => false,
        'video' => false,
        'autoconvert' => false,
        'udh' => false,
        'template' => false,
        'documentUrl' => false,
        'audioUrl' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sender' => 'sender',
        'validity' => 'validity',
        'ttl' => 'ttl',
        'text' => 'text',
        'imageUrl' => 'image_url',
        'buttonUrl' => 'button_url',
        'buttonText' => 'button_text',
        'channel' => 'channel',
        'video' => 'video',
        'autoconvert' => 'autoconvert',
        'udh' => 'udh',
        'template' => 'template',
        'documentUrl' => 'document_url',
        'audioUrl' => 'audio_url'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sender' => 'setSender',
        'validity' => 'setValidity',
        'ttl' => 'setTtl',
        'text' => 'setText',
        'imageUrl' => 'setImageUrl',
        'buttonUrl' => 'setButtonUrl',
        'buttonText' => 'setButtonText',
        'channel' => 'setChannel',
        'video' => 'setVideo',
        'autoconvert' => 'setAutoconvert',
        'udh' => 'setUdh',
        'template' => 'setTemplate',
        'documentUrl' => 'setDocumentUrl',
        'audioUrl' => 'setAudioUrl'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sender' => 'getSender',
        'validity' => 'getValidity',
        'ttl' => 'getTtl',
        'text' => 'getText',
        'imageUrl' => 'getImageUrl',
        'buttonUrl' => 'getButtonUrl',
        'buttonText' => 'getButtonText',
        'channel' => 'getChannel',
        'video' => 'getVideo',
        'autoconvert' => 'getAutoconvert',
        'udh' => 'getUdh',
        'template' => 'getTemplate',
        'documentUrl' => 'getDocumentUrl',
        'audioUrl' => 'getAudioUrl'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const CHANNEL_TELEGRAM = 'telegram';
    public const AUTOCONVERT_FULL = 'full';
    public const AUTOCONVERT_ON = 'on';
    public const AUTOCONVERT_OFF = 'off';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelAllowableValues()
    {
        return [
            self::CHANNEL_TELEGRAM,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAutoconvertAllowableValues()
    {
        return [
            self::AUTOCONVERT_FULL,
            self::AUTOCONVERT_ON,
            self::AUTOCONVERT_OFF,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('sender', $data ?? [], null);
        $this->setIfExists('validity', $data ?? [], null);
        $this->setIfExists('ttl', $data ?? [], null);
        $this->setIfExists('text', $data ?? [], null);
        $this->setIfExists('imageUrl', $data ?? [], null);
        $this->setIfExists('buttonUrl', $data ?? [], null);
        $this->setIfExists('buttonText', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], 'telegram');
        $this->setIfExists('video', $data ?? [], null);
        $this->setIfExists('autoconvert', $data ?? [], null);
        $this->setIfExists('udh', $data ?? [], null);
        $this->setIfExists('template', $data ?? [], null);
        $this->setIfExists('documentUrl', $data ?? [], null);
        $this->setIfExists('audioUrl', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!is_null($this->container['channel']) && !in_array($this->container['channel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'channel', must be one of '%s'",
                $this->container['channel'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAutoconvertAllowableValues();
        if (!is_null($this->container['autoconvert']) && !in_array($this->container['autoconvert'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'autoconvert', must be one of '%s'",
                $this->container['autoconvert'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sender
     *
     * @return string|null
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string|null $sender Phone number or alphanumeric sender name
     *
     * @return self
     */
    public function setSender($sender)
    {
        if (is_null($sender)) {
            throw new \InvalidArgumentException('non-nullable sender cannot be null');
        }
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets validity
     *
     * @return int|null
     */
    public function getValidity()
    {
        return $this->container['validity'];
    }

    /**
     * Sets validity
     *
     * @param int|null $validity After how many minutes this channel is considered as failed and the next channel is attempted
     *
     * @return self
     */
    public function setValidity($validity)
    {
        if (is_null($validity)) {
            throw new \InvalidArgumentException('non-nullable validity cannot be null');
        }
        $this->container['validity'] = $validity;

        return $this;
    }

    /**
     * Gets ttl
     *
     * @return int|null
     */
    public function getTtl()
    {
        return $this->container['ttl'];
    }

    /**
     * Sets ttl
     *
     * @param int|null $ttl After how many seconds this channel is considered as failed and the next channel is attempted.       Only one of \"ttl\" and \"validity\" can be used.
     *
     * @return self
     */
    public function setTtl($ttl)
    {
        if (is_null($ttl)) {
            throw new \InvalidArgumentException('non-nullable ttl cannot be null');
        }
        $this->container['ttl'] = $ttl;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Plaintext content for Telegram
     *
     * @return self
     */
    public function setText($text)
    {
        if (is_null($text)) {
            throw new \InvalidArgumentException('non-nullable text cannot be null');
        }
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets imageUrl
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['imageUrl'];
    }

    /**
     * Sets imageUrl
     *
     * @param string|null $imageUrl URL for the embedded image. Mutually exclusive with \"document_url\" and \"audio_url\"
     *
     * @return self
     */
    public function setImageUrl($imageUrl)
    {
        if (is_null($imageUrl)) {
            throw new \InvalidArgumentException('non-nullable imageUrl cannot be null');
        }
        $this->container['imageUrl'] = $imageUrl;

        return $this;
    }

    /**
     * Gets buttonUrl
     *
     * @return string|null
     */
    public function getButtonUrl()
    {
        return $this->container['buttonUrl'];
    }

    /**
     * Sets buttonUrl
     *
     * @param string|null $buttonUrl URL of the button, must be specified along with ''text'', ''button_text'' and ''image_url'' (optional)
     *
     * @return self
     */
    public function setButtonUrl($buttonUrl)
    {
        if (is_null($buttonUrl)) {
            throw new \InvalidArgumentException('non-nullable buttonUrl cannot be null');
        }
        $this->container['buttonUrl'] = $buttonUrl;

        return $this;
    }

    /**
     * Gets buttonText
     *
     * @return string|null
     */
    public function getButtonText()
    {
        return $this->container['buttonText'];
    }

    /**
     * Sets buttonText
     *
     * @param string|null $buttonText Must be specified along with ''text'', ''button_url'', ''button_text'', ''image_url'' (optional)
     *
     * @return self
     */
    public function setButtonText($buttonText)
    {
        if (is_null($buttonText)) {
            throw new \InvalidArgumentException('non-nullable buttonText cannot be null');
        }
        $this->container['buttonText'] = $buttonText;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string|null $channel The channel used to deliver the message
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $allowedValues = $this->getChannelAllowableValues();
        if (!in_array($channel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'channel', must be one of '%s'",
                    $channel,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets video
     *
     * @return \Messente\Api\Model\ViberVideo|null
     */
    public function getVideo()
    {
        return $this->container['video'];
    }

    /**
     * Sets video
     *
     * @param \Messente\Api\Model\ViberVideo|null $video video
     *
     * @return self
     */
    public function setVideo($video)
    {
        if (is_null($video)) {
            throw new \InvalidArgumentException('non-nullable video cannot be null');
        }
        $this->container['video'] = $video;

        return $this;
    }

    /**
     * Gets autoconvert
     *
     * @return string|null
     */
    public function getAutoconvert()
    {
        return $this->container['autoconvert'];
    }

    /**
     * Sets autoconvert
     *
     * @param string|null $autoconvert Defines how non-GSM characters will be treated:    - \"on\" Use replacement settings from the account's [API Auto Replace settings page](https://dashboard.messente.com/api-settings/auto-replace) (default)   - \"full\" All non GSM 03.38 characters will be replaced with suitable alternatives   - \"off\" Message content is not modified in any way
     *
     * @return self
     */
    public function setAutoconvert($autoconvert)
    {
        if (is_null($autoconvert)) {
            throw new \InvalidArgumentException('non-nullable autoconvert cannot be null');
        }
        $allowedValues = $this->getAutoconvertAllowableValues();
        if (!in_array($autoconvert, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'autoconvert', must be one of '%s'",
                    $autoconvert,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['autoconvert'] = $autoconvert;

        return $this;
    }

    /**
     * Gets udh
     *
     * @return string|null
     */
    public function getUdh()
    {
        return $this->container['udh'];
    }

    /**
     * Sets udh
     *
     * @param string|null $udh hex-encoded string containing SMS UDH
     *
     * @return self
     */
    public function setUdh($udh)
    {
        if (is_null($udh)) {
            throw new \InvalidArgumentException('non-nullable udh cannot be null');
        }
        $this->container['udh'] = $udh;

        return $this;
    }

    /**
     * Gets template
     *
     * @return \Messente\Api\Model\WhatsAppTemplate|null
     */
    public function getTemplate()
    {
        return $this->container['template'];
    }

    /**
     * Sets template
     *
     * @param \Messente\Api\Model\WhatsAppTemplate|null $template template
     *
     * @return self
     */
    public function setTemplate($template)
    {
        if (is_null($template)) {
            throw new \InvalidArgumentException('non-nullable template cannot be null');
        }
        $this->container['template'] = $template;

        return $this;
    }

    /**
     * Gets documentUrl
     *
     * @return string|null
     */
    public function getDocumentUrl()
    {
        return $this->container['documentUrl'];
    }

    /**
     * Sets documentUrl
     *
     * @param string|null $documentUrl URL for the embedded image. Mutually exclusive with \"audio_url\" and \"image_url\"
     *
     * @return self
     */
    public function setDocumentUrl($documentUrl)
    {
        if (is_null($documentUrl)) {
            throw new \InvalidArgumentException('non-nullable documentUrl cannot be null');
        }
        $this->container['documentUrl'] = $documentUrl;

        return $this;
    }

    /**
     * Gets audioUrl
     *
     * @return string|null
     */
    public function getAudioUrl()
    {
        return $this->container['audioUrl'];
    }

    /**
     * Sets audioUrl
     *
     * @param string|null $audioUrl URL for the embedded image. Mutually exclusive with \"document_url\" and \"image_url\"
     *
     * @return self
     */
    public function setAudioUrl($audioUrl)
    {
        if (is_null($audioUrl)) {
            throw new \InvalidArgumentException('non-nullable audioUrl cannot be null');
        }
        $this->container['audioUrl'] = $audioUrl;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


